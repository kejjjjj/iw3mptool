fn dist(a, b)
{
	const sub = [ a[0] - b[0], a[1] - b[1], a[2] - b[2]];
	return math.sqrt(sub[0] * sub[0] + sub[1] * sub[1] + sub[2] * sub[2]);
}

fn discoverBounces(brushes)
{
	const resultWindings = [];
	const isBounce = (v) => v[2] >= 0.3 && v[2] <= 0.7;

	for(const { windings } : brushes){
		for(const winding : windings){
			if(!isBounce(winding.normal))
				continue;

			resultWindings.push(winding);
		}
	}

	return resultWindings;
}

fn main()
{
	const bounces = discoverBounces(world.brushes);

	if(bounces.length == 0){
		return println("^3no bounces loaded!");
	}

	const myOrigin = self.origin;

	const sorted = bounces.sort((a, b) => dist(myOrigin, a.origin) < dist(myOrigin, b.origin));
	const nearest10 = sorted.slice(0, math.min(10, sorted.length));

	for(const {origin, normal} : nearest10){
		world.debug_string(origin, [1,1,1,1], 1.0, number.setprecision(normal[2], 2), 1000);
	}


}