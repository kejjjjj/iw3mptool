fn dist(a, b)
{
	const sub = [ a[0] - b[0], a[1] - b[1], a[2] - b[2]];
	return math.sqrt(sub[0] * sub[0] + sub[1] * sub[1] + sub[2] * sub[2]);
}

fn discoverBounces(models)
{
	const bounces = [];
	const isBounce = (v) => v[2] >= 0.3 && v[2] <= 0.7;

	let numVerts = 0;

	for(const model : models){

		//save some memory :)
		if(!model.name.contains("veh"))
			continue;

		numVerts += model.triangles.length * 3;
		for(const tri : model.triangles){

			if(!isBounce(tri.normal))
				continue;

			bounces.push(tri);
		}
	}
	println("verts to process: ", numVerts);

	return bounces;
}

fn main()
{
	const bounces = discoverBounces(world.models);

	if(bounces.length == 0){
		return println("^3no models loaded!");
	}

	const myOrigin = self.origin;

	//this will take a while!
	const sorted = bounces.sort((a, b) => dist(myOrigin, a.origin) < dist(myOrigin, b.origin));
	const nearest = sorted.slice(0, math.min(1, sorted.length));

	if(nearest.length == 0)
		return println("woops :/");

	const { origin } = nearest[0];

	self.look_at(origin[0], origin[1], origin[2]);

}